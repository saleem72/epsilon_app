// Mocks generated by Mockito 5.3.2 from annotations
// in epsilon_app/test/features/auth/login_screen/dependancies/mock_login_repository/login_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i4;
import 'package:epsilon_app/core/helpers/network_info/network_info.dart' as _i2;
import 'package:epsilon_app/features/auth/login_screen/data/data_source/login_service.dart'
    as _i3;
import 'package:epsilon_app/features/auth/login_screen/data/repository/login_repository_impl.dart'
    as _i6;
import 'package:epsilon_app/features/auth/login_screen/domain/failures/login_failure.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkInfo_0 extends _i1.SmartFake implements _i2.NetworkInfo {
  _FakeNetworkInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginService_1 extends _i1.SmartFake implements _i3.LoginService {
  _FakeLoginService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginFailure_3 extends _i1.SmartFake implements _i5.LoginFailure {
  _FakeLoginFailure_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepositoryImpl extends _i1.Mock
    implements _i6.LoginRepositoryImpl {
  MockLoginRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_0(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i2.NetworkInfo);
  @override
  _i3.LoginService get service => (super.noSuchMethod(
        Invocation.getter(#service),
        returnValue: _FakeLoginService_1(
          this,
          Invocation.getter(#service),
        ),
      ) as _i3.LoginService);
  @override
  _i7.Future<_i4.Either<_i5.LoginFailure, String>> login({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i4.Either<_i5.LoginFailure, String>>.value(
            _FakeEither_2<_i5.LoginFailure, String>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i4.Either<_i5.LoginFailure, String>>);
  @override
  _i5.LoginFailure mapError(Object? error) => (super.noSuchMethod(
        Invocation.method(
          #mapError,
          [error],
        ),
        returnValue: _FakeLoginFailure_3(
          this,
          Invocation.method(
            #mapError,
            [error],
          ),
        ),
      ) as _i5.LoginFailure);
}
